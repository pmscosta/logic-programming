father(X,Y) :-
	parent(X,Y),
	male(X).

termos:
	-número
	-átomos - começa com letra minúscula ou entre pelicas (')
	-variáveis - começa com maiúscula, começar com _ (->existe algum valor? quando usado com o underscore).
	-termos compostos - coords(3,2), p.ex, ou então 3-2 (se não especificado que é uma subtração)


	/= -> diferente
	/+ -> negação
	
	+ -> entrada
	- -> saída (deve ser deixado como variável)
	? -> tanto faz

read(X). -> requires enter
get_code(X), X=97 || get_char(X), X=a --> gotta get rid of line feed after

write(X)
write('ola') -> ola
write("ola") -> [111, 109, 97]

format(...)

put_code(X).
put_char(X).


//=====================
:-use_module(library(lists)).

secção 11.3
       10.21

//=====================
dynamic - secção 4.12


//=====================

functor(Termo, Nome, Aridade). 

-->functor(ligado(a,b), N, A). 
	N = ligado, A = 2. 

-->functor(T, ligado, 2). 
	T = ligado(_, _).

arg(Num, Termo, Vel).  

-->arg(2, ligado(a,b), V).
	V = b.


Termo = ..Lista

-->ligado(a,b) = ..[ligado, a, b].
	ligado(a,b) = ..L.
	T = ..[execbla, a, 2, X], T.  (a chamada ao último T aplica-o)
	T = execbla(a, 2, X).


//======================

:- op(Prec, Type, Nome).
	Prec - 1...1200
	Type - {
				fx, fy -> Prefix,   (tipo negação)
				xf, yf -> Postfix,	(tipo ++ em C)
				xfx, yfx, xfy -> Infix	(tipo soma)
			}
	x - mom-assoc
	y - side-assoc

xfx -> não pode ter operadores filhos do mesmo nível